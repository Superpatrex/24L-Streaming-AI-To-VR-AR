//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""UI_AI"",
            ""id"": ""7e750695-8431-4d2a-b0f0-5af4c6fd0935"",
            ""actions"": [
                {
                    ""name"": ""ActivateUI"",
                    ""type"": ""Button"",
                    ""id"": ""b8fd10ce-8898-4e9d-88b2-62c2d2eaafa2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""114b44ba-0e54-4bcf-8b91-8ce274407961"",
                    ""path"": ""<OculusTouchController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""UI_Controls_Scheme"",
                    ""action"": ""ActivateUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""UI_Controls_Scheme"",
            ""bindingGroup"": ""UI_Controls_Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<OculusTouchController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UI_AI
        m_UI_AI = asset.FindActionMap("UI_AI", throwIfNotFound: true);
        m_UI_AI_ActivateUI = m_UI_AI.FindAction("ActivateUI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI_AI
    private readonly InputActionMap m_UI_AI;
    private List<IUI_AIActions> m_UI_AIActionsCallbackInterfaces = new List<IUI_AIActions>();
    private readonly InputAction m_UI_AI_ActivateUI;
    public struct UI_AIActions
    {
        private @PlayerControls m_Wrapper;
        public UI_AIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActivateUI => m_Wrapper.m_UI_AI_ActivateUI;
        public InputActionMap Get() { return m_Wrapper.m_UI_AI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UI_AIActions set) { return set.Get(); }
        public void AddCallbacks(IUI_AIActions instance)
        {
            if (instance == null || m_Wrapper.m_UI_AIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UI_AIActionsCallbackInterfaces.Add(instance);
            @ActivateUI.started += instance.OnActivateUI;
            @ActivateUI.performed += instance.OnActivateUI;
            @ActivateUI.canceled += instance.OnActivateUI;
        }

        private void UnregisterCallbacks(IUI_AIActions instance)
        {
            @ActivateUI.started -= instance.OnActivateUI;
            @ActivateUI.performed -= instance.OnActivateUI;
            @ActivateUI.canceled -= instance.OnActivateUI;
        }

        public void RemoveCallbacks(IUI_AIActions instance)
        {
            if (m_Wrapper.m_UI_AIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUI_AIActions instance)
        {
            foreach (var item in m_Wrapper.m_UI_AIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UI_AIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UI_AIActions @UI_AI => new UI_AIActions(this);
    private int m_UI_Controls_SchemeSchemeIndex = -1;
    public InputControlScheme UI_Controls_SchemeScheme
    {
        get
        {
            if (m_UI_Controls_SchemeSchemeIndex == -1) m_UI_Controls_SchemeSchemeIndex = asset.FindControlSchemeIndex("UI_Controls_Scheme");
            return asset.controlSchemes[m_UI_Controls_SchemeSchemeIndex];
        }
    }
    public interface IUI_AIActions
    {
        void OnActivateUI(InputAction.CallbackContext context);
    }
}
